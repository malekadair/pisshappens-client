{"version":3,"sources":["routes/HomePage/HomePage.js","routes/ComicsListPage/ComicsListPage.js","components/Welcome/Welcome.js","components/Nav/Nav.js","routes/ComicPage/ComicPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Component","ComicsListPage","ComicPage","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVA+CeA,G,gOAzBb,OACC,6BACC,6C,GAbmBC,cCmCRC,GCxCOD,Y,MCAJA,Y,oNFgBhB,OACC,6BACC,qD,GAbyBA,cGoCdE,E,oNAzBb,OACC,6BACC,+C,GAboBF,aCmBTG,E,uKAfX,OACE,yBAAKC,UAAU,OACb,2CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IAGjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,UAAUC,UAAWN,IACvC,kBAAC,IAAD,CAAOK,KAAK,mBAAmBC,UAAWL,U,GAXlCF,aCAEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.136b1b5f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n// import Welcome from '../../components/Welcome/Welcome';\n// import Nav from '../../components/Nav/Nav';\n// import TokenService from '../../services/token-service'\n// import WinnersApiService from '../../services/winners-api-service'\n// import WinnersContext from '../../contexts/winnersContext'\n// import Footer from '../../components/Footer/Footer'\n\nimport './HomePage.css'\n\nclass HomePage extends Component {\n\t// static contextType = WinnersContext\n\n\tcomponentDidMount() {\n\t\t// this.context.clearError();\n\t\t// WinnersApiService.getAllWinners()\n\t\t// \t.then(this.context.setWinners)\n\t\t// \t.catch(this.context.setError)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>HomePage</h2>\n\t\t\t\t{/* <header>\n\t\t\t\t\t<Nav />\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<div className='HomePage'>\n\n\t\t\t\t\t\t{TokenService.hasAuthToken()\n\t\t\t\t\t\t\t? <WinnersList />\n\t\t\t\t\t\t\t: <Welcome />}\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Link to='/guess' className='guess-button'>Guess!</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t<Footer /> */}\n\t\t\t</div >\n\t\t)\n\t}\n}\n\nexport default HomePage","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Welcome from '../../components/Welcome/Welcome';\nimport Nav from '../../components/Nav/Nav';\n// import TokenService from '../../services/token-service'\n// import WinnersApiService from '../../services/winners-api-service'\n// import WinnersContext from '../../contexts/winnersContext'\n\n// import './ComicsListPage.css'\n// import Footer from '../../components/Footer/Footer';\n\nclass ComicsListPage extends Component {\n\t// static contextType = WinnersContext\n\n\tcomponentDidMount() {\n\t\t// this.context.clearError();\n\t\t// WinnersApiService.getAllWinners()\n\t\t// \t.then(this.context.setWinners)\n\t\t// \t.catch(this.context.setError)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Comics List Page</h2>\n\t\t\t\t{/* <header>\n\t\t\t\t\t<Nav />\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<div className='ComicsListPage'>\n\n\t\t\t\t\t\t{TokenService.hasAuthToken()\n\t\t\t\t\t\t\t? <WinnersList />\n\t\t\t\t\t\t\t: <Welcome />}\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Link to='/guess' className='guess-button'>Guess!</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t<Footer /> */}\n\t\t\t</div >\n\t\t)\n\t}\n}\n\nexport default ComicsListPage","import React, { Component } from 'react'\n// import green_ball from '../../img/green_ball.png'\n// import yellow_ball from '../../img/yellow_ball.png'\n// import red_ball from '../../img/red_ball.png'\n// import './Welcome.css'\n\nclass Welcome extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>Welcome</div>\n\t\t\t// <main>\n\t\t\t// \t<div className='grid-wrapper'>\n\t\t\t// \t\t<section className=\"welcomeSection\">\n\t\t\t// \t\t\t<div className='box one'>\n\t\t\t// \t\t\t\t<img src={green_ball} alt='green lottery ball' />\n\t\t\t// \t\t\t\t<p className='cardContent'>Do you want to have plain old fun in guessing the winning numbers for each Saturdayâ€™s PowerBall drawing?</p>\n\t\t\t// \t\t\t</div>\n\t\t\t// \t\t\t<div className='box two'>\n\t\t\t// \t\t\t\t<img src={yellow_ball} alt='yellow lottery ball' />\n\t\t\t// \t\t\t\t<p className='cardContent'>Would you like to share a motivational message to the world? How about promote your social media accounts?</p>\n\t\t\t// \t\t\t</div>\n\t\t\t// \t\t\t<div className='box three'>\n\t\t\t// \t\t\t\t<img src={red_ball} alt='lottery ball' />\n\t\t\t// \t\t\t\t<p className='cardContent'>Create an account, log-in, and submit your guess for the next drawing coming up this Saturday night!</p>\n\t\t\t// \t\t\t</div>\n\t\t\t// \t\t</section>\n\t\t\t// \t</div>\n\t\t\t// </main>\n\t\t)\n\t}\n}\n\nexport default Welcome\n\n\n\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './Nav.css'\n// import TokenService from '../../services/token-service'\n\n\nclass Nav extends Component {\n    handleLogoutClick = () => {\n        // TokenService.clearAuthToken();\n    };\n\n    renderLogout() {\n        return (\n            <div>\n                <Link className=\"link\" onClick={this.handleLogoutClick} to=\"/\">\n                    Logout\n                </Link>\n            </div>\n        );\n    }\n    renderLogin() {\n        return (\n            <div>\n                <Link className='link' to='/login'>Login</Link>\n                <Link className='link' to='/register'>Register</Link>\n            </div>\n        );\n    }\n    render() {\n        return (\n            <div>\n                <nav className='zone sticky main-nav'>\n                    {/* <Link className='right  siteTitle' to='/'>GottaLotto</Link>\n                    {TokenService.hasAuthToken()\n                        ? this.renderLogout()\n                        : this.renderLogin()} */}\n                </nav>\n            </div >\n        )\n    }\n}\n\nexport default Nav\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Welcome from '../../components/Welcome/Welcome';\n// import Nav from '../../components/Nav/Nav';\n// import TokenService from '../../services/token-service'\n// import WinnersApiService from '../../services/winners-api-service'\n// import WinnersContext from '../../contexts/winnersContext'\n\n// import './ComicPage.css'\n// import Footer from '../../components/Footer/Footer';\n\nclass ComicPage extends Component {\n\t// static contextType = WinnersContext\n\n\tcomponentDidMount() {\n\t\t// this.context.clearError();\n\t\t// WinnersApiService.getAllWinners()\n\t\t// \t.then(this.context.setWinners)\n\t\t// \t.catch(this.context.setError)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Comic Page</h2>\n\t\t\t\t{/* <header>\n\t\t\t\t\t<Nav />\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<div className='ComicPage'>\n\n\t\t\t\t\t\t{TokenService.hasAuthToken()\n\t\t\t\t\t\t\t? <WinnersList />\n\t\t\t\t\t\t\t: <Welcome />}\n\n\t\t\t\t\t\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Link to='/guess' className='guess-button'>Guess!</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t<Footer /> */}\n\t\t\t</div >\n\t\t)\n\t}\n}\n\nexport default ComicPage","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\n\nimport './App.css';\n\nimport HomePage from \"./routes/HomePage/HomePage\"\nimport ComicsListPage from \"./routes/ComicsListPage/ComicsListPage\"\nimport ComicPage from './routes/ComicPage/ComicPage';\n\n// import PrivateRoute from \"../src/Utils/PrivateRoute\"\n// import PublicOnlyRoute from \"../src/Utils/PublicOnlyRoute\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>PissHappens</h1>\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          {/* <PublicOnlyRoute path='/login' component={LoginPage} /> */}\n          {/* <PublicOnlyRoute path='/register' component={RegisterPage} /> */}\n          <Route exact path='/comics' component={ComicsListPage} />\n          <Route path='/comics/:comicid' component={ComicPage} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}